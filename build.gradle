buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.3.1'
    id 'de.aaschmid.cpd' version '1.0'
}

ext {
    isBuildOnJenkins = System.env['BUILD_TAG']?.startsWith('jenkins-') ?: false
}
ext.skipFindBugs = hasProperty('skipFindBugs')
println "Using skipFindBugs = ${skipFindBugs} for current build."

if (!hasProperty('junit4Version')) { // set default junit version if not set via command line
    ext.junit4Version = '4.12'
}
println "Using JUnit4 version ${junit4Version} for current build."

if (!hasProperty('junitJupiterVersion')) { // set default junit version if not set via command line
    ext.junitJupiterVersion = '5.0.1'
}
println "Using JUnit Jupiter version ${junitJupiterVersion} for current build."

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: 'osgi'

    group = 'com.tngtech.junit.dataprovider'
    version = '2.0'
}

project(':core') {
    archivesBaseName = 'junit-dataprovider-core'
    description = 'The common core for a TestNG like dataprovider runner for JUnit.'

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_6

    dependencies {
        compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'

        testCompile group: 'junit', name: 'junit', version: '4.12'

        testCompile group: 'org.assertj', name: 'assertj-core', version: '1.7.1'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.2.7'
    }
}

project(':junit4') {
    apply plugin: 'groovy'

    archivesBaseName = 'junit4-dataprovider'
    description = 'A TestNG like dataprovider runner for JUnit having a simplified syntax compared to all the existing JUnit4 features.'

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_6

    sourceSets {
        integTest {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }

    configurations {
        integTestCompile {
            extendsFrom testRuntime
        }
    }

    dependencies {
        compile project(':core')
        compile group: 'junit', name: 'junit', version: junit4Version
        compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'

        testCompile group: 'org.assertj', name: 'assertj-core', version: '1.7.1'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.2.7'

        integTestCompile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.7'

        integTestCompile group: 'org.springframework', name: 'spring-core', version: '4.3.2.RELEASE'
        integTestCompile group: 'org.springframework', name: 'spring-beans', version: '4.3.2.RELEASE'
        integTestCompile group: 'org.springframework', name: 'spring-context', version: '4.3.2.RELEASE'
        integTestCompile group: 'org.springframework', name: 'spring-test', version: '4.3.2.RELEASE'
    }

    task integTest(dependsOn: integTestClasses, type: Test, group: 'verification', description: 'Runs all integration tests.') {
        ignoreFailures = isBuildOnJenkins

        classpath = sourceSets.integTest.runtimeClasspath
        testClassesDirs = sourceSets.integTest.output.classesDirs
    }
    task touchIntegTestResultsForJenkins(type: TouchTestResults) {
        tasks integTest
        enabled = isBuildOnJenkins
    }
    build.dependsOn touchIntegTestResultsForJenkins

    eclipse {
        classpath {
            plusConfigurations += [ configurations.integTestRuntime ]
        }
    }
}

configure(subprojects.findAll{ p -> p.name.startsWith('junit-jupiter') }) {
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'groovy'

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

    sourceSets {
        test { // TODO do it as "sourceSet" named "integTest" as soon as "junit-platform-gradle-plugin" is able to handle it
            java {
                srcDir 'src/integTest/java'
            }
            groovy {
                srcDir 'src/integTest/groovy'
            }
        }
    }

    dependencies {
        compile project(':core')
        compile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitJupiterVersion

        testCompile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
        testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.10.0'

        // only integTestCompile
        testCompile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.12'
    }

    junitPlatform {
        platformVersion '1.0.1'
    }

    task touchIntegTestResultsForJenkins(type: TouchTestResults) {
        tasks test
        enabled = isBuildOnJenkins
    }
    build.dependsOn touchIntegTestResultsForJenkins
}

project(':junit-jupiter') {
    archivesBaseName = 'junit-jupiter-dataprovider'
    description = 'A TestNG like dataprovider runner for JUnit Jupiter which is feature comparable to JUnit4 dataprovider.'
}

project(':junit-jupiter-params') {
    archivesBaseName = 'junit-jupiter-params-dataprovider'
    description = 'A TestNG like dataprovider runner for JUnit Jupiter Parameterized Tests which is largely compatible to JUnit4 dataprovider.'

    dependencies {
        compile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitJupiterVersion
    }
}

// configure after properties are set and integration tests are added
subprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs += [ "-parameters" ]
    }

    jar {
        manifest {
            def now = new Date()

            def company = 'TNG Technology Consulting GmbH'
            def today = now.format('yyyy-MM-dd')
            def copyright = "${now[Calendar.YEAR]} ${company}"

            attributes (
                'Built-By': "Gradle ${gradle.gradleVersion}",
                'Built-Date': today, // using now would destroy incremental build feature
                'Specification-Title': archivesBaseName,
                'Specification-Version': version,
                'Specification-Vendor': company,
                'Implementation-Title': archivesBaseName,
                'Implementation-Version': version,
                'Implementation-Vendor': company,
                'Issue-Tracker': 'https://github.com/TNG/junit-dataprovider/issues',
                'Documentation-URL': 'https://github.com/TNG/junit-dataprovider/wiki',
                'Copyright': copyright,
                'License': 'Apache License v2.0, January 2004'
            )

            // OSGi / p2 plugin information
            instruction 'Bundle-Vendor', company
            instruction 'Bundle-Copyright', copyright
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    test {
        ignoreFailures = isBuildOnJenkins
    }

    task touchTestResultsForJenkins(type: TouchTestResults) {
        tasks test
        enabled = isBuildOnJenkins
    }
    build.dependsOn touchTestResultsForJenkins

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
        }
    }
    jacoco {
        toolVersion = '0.7.7.201606060606'
    }

    findbugs {
        if (System.getProperty("java.version")[0..2] in [ '1.6' ]) { // FindBugs v3.0.0 does not work with Java < v1.7 :-(
            toolVersion = '2.0.3'
        } else {
            toolVersion = '3.0.1'
        }
        ignoreFailures = true
    }

    plugins.withType(JavaBasePlugin) {
        check.dependsOn(rootProject.cpdCheck)
    }

    tasks.withType(FindBugs).each { task ->
        task.enabled = !rootProject.skipFindBugs
    }
}

cpd {
    if (System.getProperty("java.version")[0..2] in [ '1.6' ]) { // PMD / CPD v5.4.0 does not work with Java < v1.7 :-(
        toolVersion = '5.3.7'
    } else {
        toolVersion = '5.5.1'
    }
}

cpdCheck {
    ignoreFailures = true
    minimumTokenCount = 25
    source = subprojects*.sourceSets*.main*.java*.srcDirs + subprojects*.sourceSets*.test*.java*.srcDirs // only check java source code
}

// -- build and publish artifacts -------------------------------------------------------------------------------------
if (!hasProperty('sonatypeUsername')) {
    ext.sonatypeUsername = ''
}
if (!hasProperty('sonatypePassword')) {
    ext.sonatypePassword = ''
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'signing'

    signing {
        // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
        required {
            gradle.taskGraph.hasTask('uploadArchives')
        }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment ->
                    signing.signPom(deployment)
                }
                // username and password from gradle.properties
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    authentication(userName: rootProject.sonatypeUsername, password: rootProject.sonatypePassword)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: rootProject.sonatypeUsername, password: rootProject.sonatypePassword)
                }

                pom {
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description project.description
                        url 'https://github.com/TNG/junit-dataprovider'

                        scm {
                            url 'scm:git@github.com:TNG/junit-dataprovider.git'
                            connection 'scm:git@github.com:TNG/junit-dataprovider.git'
                            developerConnection 'scm:git@github.com:TNG/junit-dataprovider.git'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'aaschmid'
                                name 'Andreas Schmid'
                            }
                        }
                    }
                    whenConfigured { pom ->
                        // JUnit4
                        pom.dependencies.findAll{ dep -> dep.groupId == 'junit' && dep.artifactId == 'junit' &&
                                dep.scope == 'compile' }.each{ dep ->
                            dep.version = '[4.8.2,4.12]'
                            dep.scope = 'provided'
                        }
                        // JUnit5
                        pom.dependencies.findAll{ dep ->
                                ((dep.groupId == 'org.junit.jupiter' && dep.artifactId == 'junit-jupiter-engine') ||
                                (dep.groupId == 'org.junit.jupiter' && dep.artifactId == 'junit-jupiter-params')) &&
                                    dep.scope == 'compile'
                                }.each{ dep ->
                            dep.version = '[5.0.0-M6,6.0.0)'
                            dep.scope = 'provided'
                        }
                        // Remove all other dependencies
                        pom.dependencies.removeAll{ dep -> dep.scope in [ 'compile', 'test' ] &&
                                !(dep.groupId == 'com.tngtech.junit.dataprovider' && dep.artifactId == 'junit-dataprovider-core') }
                    }
                }
            }
        }
    }
}

// -- Custom tasks ------------------------------------------------------------
/**
 * Task to touch all junit xml report files for all given {@link Test} {@code tasks}.
 * This is required due to Jenkins fails if test output is created before build starts which
 * could happen using Gradle's up-to-date feature :(
 */
class TouchTestResults extends DefaultTask {
    @InputFiles
    def tasks

    @javax.inject.Inject
    public TouchTestResults(org.gradle.internal.reflect.Instantiator instantiator) {
        super()
        tasks = new org.gradle.api.internal.tasks.DefaultTaskCollection(DefaultTask.class, instantiator, project)
    }

    def tasks(Test... testTasks) {
        tasks.addAll(testTasks)
        mustRunAfter(testTasks)
    }

    @TaskAction
    void touch() {
        tasks.each { test ->
            def testResultsDir = test.reports.junitXml.destination
            if (testResultsDir.exists()) {
                def timestamp = System.currentTimeMillis()
                testResultsDir.eachFile{ file -> file.lastModified = timestamp }
            }
        }
    }
}
